{
	"name": "eide",
	"publisher": "cl",
	"author": {
		"name": "cl",
		"email": "2584456014@qq.com"
	},
	"keywords": [
		"arm",
		"stm32",
		"keil",
		"c51",
		"eide"
	],
	"homepage": "https://github.com/github0null/eide/blob/master/README.md",
	"license": "MIT",
	"displayName": "EIDE",
	"description": "An IDE for C51 and STM32 development",
	"version": "1.1.2",
	"engines": {
		"vscode": "^1.38.0"
	},
	"categories": [
		"Extension Packs"
	],
	"activationEvents": [
		"*"
	],
	"icon": "res/icon/icon.png",
	"main": "./out/src/extension.js",
	"readme": "https://github.com/github0null/eide/blob/master/README.md",
	"bugs": {
		"url": "https://github.com/github0null/eide/issues",
		"email": "2584456014@qq.com"
	},
	"os": [
		"win32"
	],
	"repository": {
		"url": "https://github.com/github0null/eide.git",
		"type": "git"
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"test": "npm run compile && node ./node_modules/vscode/bin/test"
	},
	"devDependencies": {
		"@types/mocha": "^5.2.7",
		"@types/node": "^12.12.17",
		"@types/vscode": "^1.38.0",
		"tslint": "^5.20.1",
		"typescript": "^3.7.3"
	},
	"dependencies": {
		"@types/iconv-lite": "0.0.1",
		"@types/x2js": "^3.1.0",
		"iconv-lite": "^0.5.0",
		"x2js": "^3.3.1"
	},
	"contributes": {
		"configuration": [
			{
				"title": "EIDE",
				"properties": {
					"EIDE.Option.AutoConvertFile": {
						"type": "boolean",
						"scope": "machine",
						"markdownDescription": "Auto convert source file to `UTF-8` when import a keil project",
						"default": "true"
					},
					"EIDE.ARM.INI.Path": {
						"type": "string",
						"scope": "machine",
						"markdownDescription": "Keil ARM MDK `TOOLS.INI` file path [`example: D:\\Demo\\Keil\\TOOLS.INI`]",
						"default": "unknown"
					},
					"EIDE.ARM.Option.AutoGenerateRTE_Components": {
						"type": "boolean",
						"scope": "resource",
						"description": "Auto Generate RTE_Components.h",
						"default": "true"
					},
					"EIDE.ARM.Project.MacroList.Release": {
						"type": "string",
						"scope": "resource",
						"markdownDescription": "Macro List for Release Mode, `use ';' to separate multiple macros and end with ';'`, these macros will be added at compile time",
						"default": "",
						"pattern": "^(?:[a-zA-Z_]\\w*\\s*;\\s*)*$"
					},
					"EIDE.ARM.Project.MacroList.Debug": {
						"type": "string",
						"scope": "resource",
						"examples": [],
						"markdownDescription": "Macro List for Debug Mode, `use ';' to separate multiple macros and end with ';'`, these macros will be added at compile time",
						"default": "DEBUG;",
						"pattern": "^(?:[a-zA-Z_]\\w*\\s*;\\s*)*$"
					},
					"EIDE.C51.INI.Path": {
						"type": "string",
						"scope": "machine",
						"markdownDescription": "Keil C51 `TOOLS.INI` file path [`example: D:\\Demo\\Keil\\C51\\TOOLS.INI`]",
						"default": "unknown"
					},
					"EIDE.C51.Project.MacroList.Release": {
						"type": "string",
						"scope": "resource",
						"markdownDescription": "Macro List for Release Mode, `use ';' to separate multiple macros and end with ';'`, these macros will be added at compile time",
						"default": "",
						"pattern": "^(?:[a-zA-Z_]\\w*\\s*;\\s*)*$"
					},
					"EIDE.C51.Project.MacroList.Debug": {
						"type": "string",
						"scope": "resource",
						"markdownDescription": "Macro List for Debug Mode, `use ';' to separate multiple macros and end with ';'`, these macros will be added at compile time",
						"default": "DEBUG;",
						"pattern": "^(?:[a-zA-Z_]\\w*\\s*;\\s*)*$"
					}
				}
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "EIDEView",
					"title": "EIDE",
					"icon": "./res/icon/activitybar.svg"
				}
			]
		},
		"views": {
			"EIDEView": [
				{
					"id": "Operation",
					"name": "Operation"
				},
				{
					"id": "Project",
					"name": "Project View"
				}
			]
		},
		"commands": [
			{
				"command": "Project.refresh",
				"title": "Refresh",
				"icon": {
					"dark": "./res/icon/action-refresh-dark.svg",
					"light": "./res/icon/action-refresh.svg"
				}
			},
			{
				"command": "Project.historyRecord",
				"title": "History record",
				"icon": {
					"dark": "./res/icon/TaskList_16x.svg",
					"light": "./res/icon/TaskList_16x.svg"
				}
			},
			{
				"command": "Project.saveAll",
				"title": "Save all project",
				"icon": {
					"dark": "./res/icon/SaveAll_16x.svg",
					"light": "./res/icon/SaveAll_16x.svg"
				}
			},
			{
				"command": "Project.save",
				"title": "Save this project",
				"icon": {
					"dark": "./res/icon/Save_16x.svg",
					"light": "./res/icon/Save_16x.svg"
				}
			},
			{
				"command": "Project.compile",
				"title": "Compile and output hex file",
				"icon": {
					"dark": "./res/icon/BuildSolution_16x.svg",
					"light": "./res/icon/BuildSolution_16x.svg"
				}
			},
			{
				"command": "Project.repair",
				"title": "Repair project dependence",
				"icon": {
					"dark": "./res/icon/Repair_16x.svg",
					"light": "./res/icon/Repair_16x.svg"
				}
			},
			{
				"command": "Project.addSrcDir",
				"title": "Add a src root dir to project",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.removeSrcDir",
				"title": "Remove this src root dir from project",
				"icon": {
					"dark": "./res/icon/TestCoveredFailing_16x.svg",
					"light": "./res/icon/TestCoveredFailing_16x.svg"
				}
			},
			{
				"command": "Project.close",
				"title": "Close project",
				"icon": {
					"dark": "./res/icon/TestCoveredFailing_16x.svg",
					"light": "./res/icon/TestCoveredFailing_16x.svg"
				}
			},
			{
				"command": "Project.addPackage",
				"title": "Install Keil Package",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.removePackage",
				"title": "Uninstall this Keil Package",
				"icon": {
					"dark": "./res/icon/TestCoveredFailing_16x.svg",
					"light": "./res/icon/TestCoveredFailing_16x.svg"
				}
			},
			{
				"command": "Project.setDevice",
				"title": "Set a Device From Package",
				"icon": {
					"dark": "./res/icon/FieldAdded_16x.svg",
					"light": "./res/icon/FieldAdded_16x.svg"
				}
			},
			{
				"command": "Project.exportXml",
				"title": "Export Keil Project XML (.uvprojx or .uvproj)",
				"icon": {
					"dark": "./res/icon/ExportFile_16x.svg",
					"light": "./res/icon/ExportFile_16x.svg"
				}
			},
			{
				"command": "Project.modifyCompileConfig",
				"title": "Modify Configuration",
				"icon": {
					"dark": "./res/icon/Pen4_16x.svg",
					"light": "./res/icon/Pen4_16x.svg"
				}
			},
			{
				"command": "Project.modifyUploadConfig",
				"title": "Modify Configuration",
				"icon": {
					"dark": "./res/icon/Pen4_16x.svg",
					"light": "./res/icon/Pen4_16x.svg"
				}
			},
			{
				"command": "Project.addIncludeDir",
				"title": "Add include dirs to project",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.addDefine",
				"title": "Add a define to project",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.addLibDir",
				"title": "Add library dirs to project",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.addSourceDir",
				"title": "Add a source dir to project",
				"icon": {
					"dark": "./res/icon/Add_16xMD.svg",
					"light": "./res/icon/Add_16xMD.svg"
				}
			},
			{
				"command": "Project.addLib",
				"title": "Add libs to project",
				"icon": {
					"dark": "./res/icon/Library_16x.svg",
					"light": "./res/icon/Library_16x.svg"
				}
			},
			{
				"command": "Project.removeDependenceItem",
				"title": "Remove this item",
				"icon": {
					"dark": "./res/icon/TestCoveredFailing_16x.svg",
					"light": "./res/icon/TestCoveredFailing_16x.svg"
				}
			},
			{
				"command": "Project.importDependenceFromPack",
				"title": "Import this dependence to project",
				"icon": {
					"dark": "./res/icon/AddDependencyGraph_16x.svg",
					"light": "./res/icon/AddDependencyGraph_16x.svg"
				}
			},
			{
				"command": "Project.removeDependenceFromPack",
				"title": "Remove this dependence from project",
				"icon": {
					"dark": "./res/icon/TestCoveredFailing_16x.svg",
					"light": "./res/icon/TestCoveredFailing_16x.svg"
				}
			},
			{
				"command": "Project.uploadToDevice",
				"title": "upload bin file to device",
				"icon": {
					"dark": "./res/icon/TransferDownload_16x.svg",
					"light": "./res/icon/TransferDownload_16x.svg"
				}
			},
			{
				"command": "Project.modifyStorageLayout",
				"title": "modify storage layout",
				"icon": {
					"dark": "./res/icon/Pen4_16x.svg",
					"light": "./res/icon/Pen4_16x.svg"
				}
			},
			{
				"command": "Project.copyItemValue",
				"title": "copy the item value",
				"icon": {
					"dark": "./res/icon/CopyToClipboard_16x.svg",
					"light": "./res/icon/CopyToClipboard_16x.svg"
				}
			},
			{
				"command": "Project.switchMode",
				"title": "switch release/debug mode",
				"icon": {
					"dark": "./res/icon/SwitchSourceOrTarget_16x.svg",
					"light": "./res/icon/SwitchSourceOrTarget_16x.svg"
				}
			},
			{
				"command": "eide.ShowUUID",
				"category": "eide",
				"title": "Show UUID"
			},
			{
				"command": "eide.uploadLog",
				"category": "eide",
				"title": "Upload log to remote server"
			},
			{
				"command": "eide.ConvertToUTF8",
				"title": "Convert file to UTF8 (has backup)"
			},
			{
				"command": "eide.UndoConvertToUTF8",
				"title": "Undo convert file to UTF8"
			}
		],
		"keybindings": [
			{
				"command": "Project.compile",
				"key": "f6"
			},
			{
				"command": "Project.uploadToDevice",
				"key": "f7"
			},
			{
				"command": "eide.uploadLog",
				"key": "ctrl+f1"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "eide.ConvertToUTF8",
					"group": "commands"
				},
				{
					"command": "eide.UndoConvertToUTF8",
					"group": "commands"
				}
			],
			"view/title": [
				{
					"command": "Project.refresh",
					"group": "navigation",
					"when": "view == Project"
				},
				{
					"command": "Project.historyRecord",
					"group": "navigation",
					"when": "view == Project"
				},
				{
					"command": "Project.saveAll",
					"group": "navigation",
					"when": "view == Project"
				}
			],
			"view/item/context": [
				{
					"command": "Project.addPackage",
					"group": "inline",
					"when": "viewItem == PACK && view == Project"
				},
				{
					"command": "Project.removePackage",
					"group": "inline",
					"when": "viewItem == PACK_GROUP && view == Project"
				},
				{
					"command": "Project.setDevice",
					"group": "inline",
					"when": "viewItem == PACK_GROUP && view == Project"
				},
				{
					"command": "Project.repair",
					"when": "viewItem == DEPENDENCE && view == Project"
				},
				{
					"command": "Project.repair",
					"group": "inline",
					"when": "viewItem == DEPENDENCE && view == Project"
				},
				{
					"command": "Project.save",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.switchMode",
					"group": "inline",
					"when": "viewItem == SOLUTION && view == Project"
				},
				{
					"command": "Project.exportXml",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.exportXml",
					"group": "inline",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.compile",
					"group": "inline",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.compile",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.uploadToDevice",
					"group": "inline",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.uploadToDevice",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.close",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.addSrcDir",
					"group": "inline",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.addLib",
					"group": "inline",
					"when": "viewItem == SOLUTION || viewItem == PROJECT && view == Project"
				},
				{
					"command": "Project.removeSrcDir",
					"group": "inline",
					"when": "viewItem == SRC_GROUP && view == Project"
				},
				{
					"command": "Project.modifyCompileConfig",
					"group": "inline",
					"when": "viewItem == COMPILE_CONFIGURATION_ITEM && view == Project"
				},
				{
					"command": "Project.modifyUploadConfig",
					"group": "inline",
					"when": "viewItem == UPLOAD_OPTION_ITEM && view == Project"
				},
				{
					"command": "Project.addIncludeDir",
					"group": "inline",
					"when": "viewItem == INC_GROUP && view == Project"
				},
				{
					"command": "Project.addDefine",
					"group": "inline",
					"when": "viewItem == DEFINE_GROUP && view == Project"
				},
				{
					"command": "Project.addLibDir",
					"group": "inline",
					"when": "viewItem == LIB_GROUP && view == Project"
				},
				{
					"command": "Project.addSourceDir",
					"group": "inline",
					"when": "viewItem == SOURCE_GROUP && view == Project"
				},
				{
					"command": "Project.removeDependenceItem",
					"group": "inline",
					"when": "viewItem == INC_ITEM || viewItem == DEFINE_ITEM || viewItem == LIB_ITEM || viewItem == SOURCE_ITEM && view == Project"
				},
				{
					"command": "Project.copyItemValue",
					"group": "inline",
					"when": "viewItem == ITEM || viewItem == DEPENDENCE_ITEM || viewItem == INC_ITEM || viewItem == DEFINE_ITEM || viewItem == LIB_ITEM || viewItem == SOURCE_ITEM && view == Project"
				},
				{
					"command": "Project.importDependenceFromPack",
					"group": "inline",
					"when": "viewItem == COMPONENT_GROUP && view == Project"
				},
				{
					"command": "Project.removeDependenceFromPack",
					"group": "inline",
					"when": "viewItem == ACTIVED_GROUP && view == Project"
				},
				{
					"command": "Project.modifyStorageLayout",
					"group": "inline",
					"when": "viewItem == COMPILE_CONFIGURATION_STORAGE_LAYOUT && view == Project"
				}
			]
		},
		"snippets": [
			{
				"language": "c",
				"path": "./lang/snippets.json"
			}
		],
		"grammars": [
			{
				"language": "c",
				"scopeName": "source.c.c51",
				"path": "./lang/c51.tmLanguage.json"
			}
		]
	}
}