{
    "title": "SDCC Compile options",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "definitions": {
        "misc-controls": {
            "markdownDescription": "Misc Controls（杂项）",
            "type": "array",
            "items": {
                "type": "string"
            },
            "default": []
        }
    },
    "properties": {
        "beforeBuildTasks": {
            "markdownDescription": "编译前要执行的命令列表 (List of commands to execute before compiling)",
            "type": "array",
            "default": [
                {
                    "name": "clean",
                    "command": "del /Q \"${OutDir}\\*.*\""
                }
            ],
            "items": {
                "type": "object",
                "required": [
                    "name",
                    "command"
                ],
                "properties": {
                    "name": {
                        "markdownDescription": "用于显示的可读名称 (A readable name for display)",
                        "type": "string"
                    },
                    "command": {
                        "markdownDescription": "CMD 命令行 (CMD command line)",
                        "type": "string"
                    },
                    "disable": {
                        "markdownDescription": "禁用此命令 (disable this command)",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "abortAfterFailed": {
                        "markdownDescription": "是否在此命令失败时，跳过后续的命令 (Whether to skip subsequent commands if this command fails)",
                        "type": "boolean",
                        "default": true,
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "stopBuildAfterFailed": {
                        "markdownDescription": "是否在此命令失败时，直接停止编译 (Whether to stop compiling directly when this command fails)",
                        "type": "boolean",
                        "default": true,
                        "enum": [
                            true,
                            false
                        ]
                    }
                }
            }
        },
        "afterBuildTasks": {
            "markdownDescription": "编译结束后要执行的命令列表 (List of commands to execute after compilation)",
            "type": "array",
            "default": [
                {
                    "name": "clean",
                    "command": "del \"${OutDir}\\*._*\""
                }
            ],
            "items": {
                "type": "object",
                "required": [
                    "name",
                    "command"
                ],
                "properties": {
                    "name": {
                        "markdownDescription": "用于显示的可读名称 (A readable name for display)",
                        "type": "string"
                    },
                    "command": {
                        "markdownDescription": "CMD 命令行 (CMD command line)",
                        "type": "string"
                    },
                    "disable": {
                        "markdownDescription": "禁用此命令 (disable this command)",
                        "type": "boolean",
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "abortAfterFailed": {
                        "markdownDescription": "是否在此命令失败时，跳过后续的命令 (Whether to skip subsequent commands if this command fails)",
                        "type": "boolean",
                        "default": true,
                        "enum": [
                            true,
                            false
                        ]
                    }
                }
            }
        },
        "global": {
            "markdownDescription": "全局选项 (Global Options)",
            "type": "object",
            "properties": {
                "device": {
                    "markdownDescription": "Specific Processor name",
                    "type": "string",
                    "default": "mcs51",
                    "enum": [
                        "mcs51",
                        "ds390",
                        "ds400",
                        "hc08",
                        "s08",
                        "z80",
                        "z180",
                        "r2k",
                        "r3ka",
                        "gbz80",
                        "tlcs90",
                        "ez80_z80",
                        "stm8",
                        "pic14",
                        "pic16"
                    ],
                    "enumDescriptions": [
                        "Intel MCS51 family of processors. This is the default processor target. ",
                        "Dallas DS80C390 processor. ",
                        "Dallas DS80C400 processor. ",
                        "Freescale/Motorola HC08 (aka 68HC08) family of processors. ",
                        "Freescale/Motorola S08 (aka 68HCS08, HCS08, CS08) family of processors. ",
                        "Zilog Z80 family of processors. ",
                        "Zilog Z180 family of processors. ",
                        "Rabbit 2000 / Rabbit 3000 family of processors. ",
                        "Rabbit 3000A family of processors. ",
                        "LR35902 GameBoy Z80 processor. ",
                        "Toshiba TLCS-90 processor. ",
                        "Zilog eZ80 processor in Z80 mode. ",
                        "STMicroelectronics STM8 family of processors. ",
                        "Microchip PIC 14-bit processors (p16f84 and variants. In development, not complete).",
                        "Microchip PIC 16-bit processors (p18f452 and variants. In development, not complete)."
                    ]
                },
                "specific-options": {
                    "markdownDescription": "options for special device",
                    "type": "array",
                    "default": [
                        "--model-large"
                    ],
                    "items": {
                        "type": "string",
                        "pattern": "^-.+$",
                        "enum": [
                            "--model-small",
                            "--model-medium",
                            "--model-large",
                            "--model-huge",
                            "--xstack",
                            "--iram-size <Value>",
                            "--xram-size <Value>",
                            "--code-size <Value>",
                            "--stack-size <Value>",
                            "--pack-iram",
                            "--no-pack-iram",
                            "--acall-ajmp",
                            "--no-ret-without-call",
                            "--model-ﬂat24",
                            "--protect-sp-update",
                            "--stack-10bit",
                            "--stack-probe",
                            "--tini-libid <nnnn>",
                            "--use-accelerator",
                            "--no-std-crt0",
                            "--callee-saves-bc",
                            "--codeseg <Value>",
                            "--constseg <Value>"
                        ],
                        "enumDescriptions": [
                            "[mcs51] Generate code for Small model programs.",
                            "[mcs51/stm8] Generate code for Medium model programs.",
                            "[mcs51/stm8] Generate code for Large model programs.",
                            "[mcs51] Generate code for Huge model programs.",
                            "[mcs51] Uses a pseudo stack in the __pdata area.",
                            "[mcs51] Causes the linker to check if the internal ram usage is within limits of the given value. ",
                            "[mcs51] Causes the linker to check if the external ram usage is within limits of the given value. ",
                            "[mcs51] Causes the linker to check if the code memory usage is within limits of the given value. ",
                            "[mcs51] Causes the linker to check if there is at minimum <Value> bytes for stack. ",
                            "[mcs51] Causes the linker to use unused register banks for data variables and pack data, idata and stack together. ",
                            "[mcs51] Causes the linker to use unused register banks for data variables and pack data, idata and stack together. ",
                            "[mcs51] Replaces the three byte instructions lcall/ljmp with the two byte instructions acall/ajmp. ",
                            "[mcs51] Causes the code generator to insert an extra lcall or acall instruction whenever it needs to use a ret instruction in a context other than a function returning. ",
                            "[DS390/DS400] Generate 24-bit ﬂat mode code. ",
                            "[DS390/DS400] disable interrupts during ESP:SP updates",
                            "[DS390/DS400] Generate code for the 10 bit stack mode of the Dallas DS80C390 part. ",
                            "[DS390/DS400] insert call to function __stack_probe at each function prologue. ",
                            "[DS390/DS400] LibraryID used in -mTININative. ",
                            "[DS390/DS400] generate code for DS390 Arithmetic Accelerator.",
                            "[z80-related] When linking, skip the standard crt0.rel object ﬁle. ",
                            "[z80-related] Force a called function to always save BC. ",
                            "[z80-related] Use <Value> for the code segment name.",
                            "[z80-related] Use <Value> for the const segment name."
                        ]
                    }
                },
                "stack-auto": {
                    "type": "boolean",
                    "markdownDescription": "Stack automatic variables",
                    "enum": [
                        true,
                        false
                    ]
                },
                "use-external-stack": {
                    "type": "boolean",
                    "markdownDescription": "Use external stack",
                    "enum": [
                        true,
                        false
                    ]
                },
                "int-long-reent": {
                    "type": "boolean",
                    "markdownDescription": "Use reentrant calls on the int and long support functions",
                    "enum": [
                        true,
                        false
                    ]
                },
                "float-reent": {
                    "type": "boolean",
                    "markdownDescription": "Use reentrant calls on the float support functions",
                    "enum": [
                        true,
                        false
                    ]
                },
                "xram-movc": {
                    "type": "boolean",
                    "markdownDescription": "Use movc instead of movx to read xram (xdata)",
                    "enum": [
                        true,
                        false
                    ]
                },
                "noinit-xram-from-code": {
                    "type": "boolean",
                    "markdownDescription": "don't memcpy initialized xram from code",
                    "enum": [
                        true,
                        false
                    ]
                },
                "peep-asm": {
                    "type": "boolean",
                    "markdownDescription": "Enable peephole optimization on inline assembly",
                    "enum": [
                        true,
                        false
                    ]
                },
                "peep-return": {
                    "type": "boolean",
                    "markdownDescription": "Enable peephole optimization for return instructions",
                    "enum": [
                        true,
                        false
                    ]
                },
                "optimize-type": {
                    "type": "string",
                    "markdownDescription": "优化类型 (optimization type)",
                    "enum": [
                        "speed",
                        "balanced",
                        "size"
                    ]
                },
                "allow-unsafe-read": {
                    "type": "boolean",
                    "markdownDescription": "Allow optimizations to read any memory location anytime",
                    "enum": [
                        true,
                        false
                    ]
                },
                "no-optimize-std-lib": {
                    "type": "boolean",
                    "markdownDescription": "Disable optimization of calls to standard library",
                    "enum": [
                        true,
                        false
                    ]
                },
                "plain-char-is-signed": {
                    "type": "boolean",
                    "markdownDescription": "plain char is signed",
                    "enum": [
                        true,
                        false
                    ]
                },
                "out-debug-info": {
                    "type": "boolean",
                    "markdownDescription": "output debug info",
                    "enum": [
                        true,
                        false
                    ]
                }
            }
        },
        "c/cpp-compiler": {
            "markdownDescription": "C 编译器选项",
            "type": "object",
            "properties": {
                "misc-controls": {
                    "$ref": "#/definitions/misc-controls"
                },
                "language-c": {
                    "markdownDescription": "C 标准",
                    "type": "string",
                    "default": "c89",
                    "enum": [
                        "c89",
                        "sdcc89",
                        "c95",
                        "c99",
                        "sdcc99",
                        "c11",
                        "sdcc11",
                        "c2x",
                        "sdcc2x"
                    ]
                }
            }
        },
        "asm-compiler": {
            "markdownDescription": "汇编器选项 (Assember options)",
            "type": "object",
            "properties": {
                "misc-controls": {
                    "$ref": "#/definitions/misc-controls"
                }
            }
        },
        "linker": {
            "markdownDescription": "链接器选项 (Linker options)",
            "type": "object",
            "properties": {
                "misc-controls": {
                    "$ref": "#/definitions/misc-controls"
                },
                "$use": {
                    "markdownDescription": "要使用哪种输出文件，默认 hex (Which output file to use, 'hex' by default)",
                    "type": "string",
                    "enum": [
                        "s19",
                        "elf"
                    ],
                    "enumDescriptions": [
                        "Motorola S19 format",
                        "ELF format (Only for HC08/S08)"
                    ]
                },
                "$mainFileName": {
                    "markdownDescription": "含有 main() 的源文件名 (Source file name with \"main()\" function)",
                    "type": "string",
                    "default": "main"
                },
                "output-lib": {
                    "type": "boolean",
                    "default": true,
                    "description": "生成为 LIB (generate LIB)"
                }
            }
        }
    }
}